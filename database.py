"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
–•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö Emby –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Ö –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
"""

import sqlite3
from datetime import datetime, timedelta
from typing import List, Optional, Tuple
import logging

logger = logging.getLogger(__name__)


class Database:
    def __init__(self, db_path: str = "emby_bot.db"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.db_path = db_path
        self.init_db()
    
    def get_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        return sqlite3.connect(self.db_path)
    
    def init_db(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS emby_users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                emby_user_id TEXT UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                first_login_at TIMESTAMP,
                is_deleted BOOLEAN DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS admins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                telegram_username TEXT,
                added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS admin_groups (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_group_id INTEGER UNIQUE NOT NULL,
                added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def add_emby_user(self, username: str, emby_user_id: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Emby –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO emby_users (username, emby_user_id) VALUES (?, ?)",
                (username, emby_user_id)
            )
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
            return True
        except sqlite3.IntegrityError:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
            return False
    
    def update_first_login(self, emby_user_id: str, first_login_time: datetime) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE emby_users SET first_login_at = ? WHERE emby_user_id = ? AND first_login_at IS NULL",
                (first_login_time, emby_user_id)
            )
            conn.commit()
            updated = cursor.rowcount > 0
            conn.close()
            if updated:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {emby_user_id}")
            return updated
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    def get_users_to_delete(self, days: int = 14) -> List[Tuple[str, str, datetime]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø—Ä–æ—à–ª–æ N –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞)"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        cutoff_date = datetime.now() - timedelta(days=days)
        
        cursor.execute('''
            SELECT username, emby_user_id, first_login_at
            FROM emby_users
            WHERE first_login_at IS NOT NULL
            AND first_login_at <= ?
            AND is_deleted = 0
            AND username LIKE 'user%'
        ''', (cutoff_date,))
        
        users = cursor.fetchall()
        conn.close()
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return users
    
    def mark_user_as_deleted(self, emby_user_id: str) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE emby_users SET is_deleted = 1 WHERE emby_user_id = ?",
                (emby_user_id,)
            )
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {emby_user_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ: {e}")
            return False
    
    def add_admin(self, telegram_id: int, telegram_username: Optional[str] = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO admins (telegram_id, telegram_username) VALUES (?, ?)",
                (telegram_id, telegram_username)
            )
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
        except sqlite3.IntegrityError:
            logger.warning(f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
    
    def remove_admin(self, telegram_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM admins WHERE telegram_id = ?", (telegram_id,))
            conn.commit()
            deleted = cursor.rowcount > 0
            conn.close()
            if deleted:
                logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {telegram_id} —É–¥–∞–ª–µ–Ω")
            return deleted
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    def is_admin(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM admins WHERE telegram_id = ?", (telegram_id,))
        is_admin = cursor.fetchone() is not None
        conn.close()
        return is_admin
    
    def get_all_admins(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM admins")
        admins = [row[0] for row in cursor.fetchall()]
        conn.close()
        return admins
    
    def add_admin_group(self, telegram_group_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO admin_groups (telegram_group_id) VALUES (?)",
                (telegram_group_id,)
            )
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ {telegram_group_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return True
        except sqlite3.IntegrityError:
            logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {telegram_group_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
    
    def remove_admin_group(self, telegram_group_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM admin_groups WHERE telegram_group_id = ?", (telegram_group_id,))
            conn.commit()
            deleted = cursor.rowcount > 0
            conn.close()
            if deleted:
                logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ {telegram_group_id} —É–¥–∞–ª–µ–Ω–∞")
            return deleted
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    def get_all_admin_groups(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_group_id FROM admin_groups")
        groups = [row[0] for row in cursor.fetchall()]
        conn.close()
        return groups
    
    def get_all_users(self) -> List[Tuple[str, str, Optional[datetime], bool]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT username, emby_user_id, first_login_at, is_deleted
            FROM emby_users
            ORDER BY created_at DESC
        ''')
        users = cursor.fetchall()
        conn.close()
        return users
